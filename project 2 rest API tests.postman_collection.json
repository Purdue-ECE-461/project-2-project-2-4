{
	"info": {
		"_postman_id": "055b7a24-fafd-40f8-8cb3-21e90877d35e",
		"name": "project 2 rest API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Registry Reset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Description message matches\", function () {",
							"    const description = pm.response.json()[\"description\"];",
							"    pm.expect(description).to.eql(\"Registry is reset\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE}}/reset",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "Homepage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.collectionVariables.set(\"package1_is-even_0.1.2\",pm.globals.get(\"package1_is-even_0.1.2\"));",
							"// pm.collectionVariables.set(\"package3_chalk_4.1.0\",pm.globals.get(\"package3_chalk_4.1.0\"));",
							"// pm.collectionVariables.set(\"package5_a_2.1.1\",pm.globals.get(\"package5_a_2.1.1\"));",
							"// pm.collectionVariables.set(\"package4_ansi-styles_2.0.0\",pm.globals.get(\"package4_ansi-styles_2.0.0\"));",
							"// pm.collectionVariables.set(\"BASE\",pm.globals.get(\"BASE\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}",
					"host": [
						"{{BASE}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Ingestion package6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"express\");",
							"pm.collectionVariables.set(\"packageVersion\", \"1.0.0\");",
							"pm.collectionVariables.set(\"packageID\", \"package6\");",
							"pm.collectionVariables.set(\"packageURL\", \"https://github.com/expressjs/express\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"validate returned json package name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Name\"]).to.eql(pm.collectionVariables.get(\"packageName\"));",
							"});",
							"",
							"pm.test(\"validate returned json package ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"ID\"]).to.eql(pm.collectionVariables.get(\"packageID\"));",
							"});",
							"",
							"pm.test(\"validate returned json package Version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Version\"]).to.eql(pm.collectionVariables.get(\"packageVersion\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"metadata\": {\n\t\t\"Name\": \"{{packageName}}\",\n\t\t\"Version\": \"{{packageVersion}}\",\n\t\t\"ID\": \"{{packageID}}\"\n\t},\n\t\"data\": {\n\t\t\"URL\": \"{{packageURL}}\",\n\t\t\"JSProgram\": \"\"\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create package1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"is-even\");",
							"pm.collectionVariables.set(\"packageVersion\", \"0.1.2\");",
							"pm.collectionVariables.set(\"packageID\", \"package1\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package1_is-even_0.1.2\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"validate returned json package name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Name\"]).to.eql(pm.collectionVariables.get(\"packageName\"));",
							"});",
							"",
							"pm.test(\"validate returned json package ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"ID\"]).to.eql(pm.collectionVariables.get(\"packageID\"));",
							"});",
							"",
							"pm.test(\"validate returned json package Version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Version\"]).to.eql(pm.collectionVariables.get(\"packageVersion\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create package3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"chalk\");",
							"pm.collectionVariables.set(\"packageVersion\", \"4.1.0\");",
							"pm.collectionVariables.set(\"packageID\", \"package3\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package3_chalk_4.1.0\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"validate returned json package name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Name\"]).to.eql(pm.collectionVariables.get(\"packageName\"));",
							"});",
							"",
							"pm.test(\"validate returned json package ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"ID\"]).to.eql(pm.collectionVariables.get(\"packageID\"));",
							"});",
							"",
							"pm.test(\"validate returned json package Version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Version\"]).to.eql(pm.collectionVariables.get(\"packageVersion\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create package3 for testing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"chalk\");",
							"pm.collectionVariables.set(\"packageVersion\", \"0.1.2\");",
							"pm.collectionVariables.set(\"packageID\", \"forTesting\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package3_chalk_4.1.0\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"validate returned json package name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Name\"]).to.eql(pm.collectionVariables.get(\"packageName\"));",
							"});",
							"",
							"pm.test(\"validate returned json package ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"ID\"]).to.eql(pm.collectionVariables.get(\"packageID\"));",
							"});",
							"",
							"pm.test(\"validate returned json package Version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Version\"]).to.eql(pm.collectionVariables.get(\"packageVersion\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create package4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"ansi-styles\");",
							"pm.collectionVariables.set(\"packageVersion\", \"2.0.0\");",
							"pm.collectionVariables.set(\"packageID\", \"package4\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package4_ansi-styles_2.0.0\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"validate returned json package name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Name\"]).to.eql(pm.collectionVariables.get(\"packageName\"));",
							"});",
							"",
							"pm.test(\"validate returned json package ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"ID\"]).to.eql(pm.collectionVariables.get(\"packageID\"));",
							"});",
							"",
							"pm.test(\"validate returned json package Version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Version\"]).to.eql(pm.collectionVariables.get(\"packageVersion\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create package5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"a\");",
							"pm.collectionVariables.set(\"packageVersion\", \"2.1.1\");",
							"pm.collectionVariables.set(\"packageID\", \"package5\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package5_a_2.1.1\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"validate returned json package name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Name\"]).to.eql(pm.collectionVariables.get(\"packageName\"));",
							"});",
							"",
							"pm.test(\"validate returned json package ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"ID\"]).to.eql(pm.collectionVariables.get(\"packageID\"));",
							"});",
							"",
							"pm.test(\"validate returned json package Version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"Version\"]).to.eql(pm.collectionVariables.get(\"packageVersion\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create Already existing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"is-even\");",
							"pm.collectionVariables.set(\"packageVersion\", \"0.1.2\");",
							"pm.collectionVariables.set(\"packageID\", \"package1\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package1_is-even_0.1.2\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Forbidden request. status code should be 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"validate error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"message\"]).to.eql(\"Package already exists.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create Unavailable packageID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"Fash\");",
							"pm.collectionVariables.set(\"packageVersion\", \"0.1.2\");",
							"pm.collectionVariables.set(\"packageID\", \"package1\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package1_is-even_0.1.2\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Forbidden request. status code should be 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"validate error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"message\"]).to.eql(\"Package ID already taken.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create Incomplete data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"a\");",
							"pm.collectionVariables.set(\"packageVersion\", \"2.1.1\");",
							"pm.collectionVariables.set(\"packageID\", \"package5\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package5_a_2.1.1\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"incomplete metadata. Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"validate error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"message\"]).to.eql(\"Malformed request.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Create invalid Base64 string",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"a\");",
							"pm.collectionVariables.set(\"packageVersion\", \"2.1.1\");",
							"pm.collectionVariables.set(\"packageID\", \"package10\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package5_a_2.1.1\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid base64 string. Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"validate error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"message\"]).to.eql(\"Malformed request.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"MohammedFashola\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Packages no body. returns entire storage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/packages",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"packages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Packages with specific version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n  {\n    \"Name\": \"chalk\"\n  },\n  {\n    \"Version\": \"1.2.3-2.1.0\",\n    \"Name\": \"ansi-styles\"\n  },\n\n  {\n    \"Version\": \"^2.1.1\",\n    \"Name\": \"a\"\n  }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/packages",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"packages"
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Retrieve package1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package1\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content returned should match the Content of the package\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"data\"][\"Content\"]).to.eql(pm.collectionVariables.get(\"package1_is-even_0.1.2\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Retrieve package5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package5\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content returned should match the Content of the package\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"data\"][\"Content\"]).to.eql(pm.collectionVariables.get(\"package5_a_2.1.1\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Retrieve ingested package",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package6\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Retrieve Non-existing Package",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package100\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No such package. status should return 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"error message should match expected\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[\"message\"]).to.eql(\"An error occurred while retrieving package\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Rate Archived Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// status code test",
							"pm.test(\"Repository is archived so status code should return 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package1\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id/rate",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id",
						"rate"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Rate non-existent package",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// status code test",
							"pm.test(\"Package does not exist. status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package1000\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id/rate",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id",
						"rate"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Rate repo with Main branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// status code test",
							"pm.test(\"Repository has Main branch but valid so status should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package3\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id/rate",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id",
						"rate"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Rate repo with Master branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// status code test",
							"pm.test(\"Repository has Master branch but valid. Should return status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package5\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id/rate",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id",
						"rate"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Rate ingested repository",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// status code test",
							"pm.test(\"Repository was ingested. status should return 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package6\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id/rate",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id",
						"rate"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Update via base64 string",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"chalk\");",
							"pm.collectionVariables.set(\"packageVersion\", \"4.1.0\");",
							"pm.collectionVariables.set(\"packageID\", \"package3\");",
							"pm.collectionVariables.set(\"content\", pm.collectionVariables.get(\"package3_chalk_4.1.0\"));",
							"pm.collectionVariables.set(\"id\", \"package3\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"{{packageName}}\",\n        \"Version\": \"{{packageVersion}}\",\n        \"ID\": \"{{packageID}}\"\n    },\n    \"data\": {\n        \"Content\": \"{{content}}\",\n        \"JSProgram\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Update via Ingestion",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"chalk\");",
							"pm.collectionVariables.set(\"packageVersion\", \"0.1.2\");",
							"pm.collectionVariables.set(\"packageID\", \"forTesting\");",
							"pm.collectionVariables.set(\"packageURL\", \"https://github.com/chalk/chalk\");",
							"pm.collectionVariables.set(\"id\", \"forTesting\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"metadata\": {\n\t\t\"Name\": \"{{packageName}}\",\n\t\t\"Version\": \"{{packageVersion}}\",\n\t\t\"ID\": \"{{packageID}}\"\n\t},\n\t\"data\": {\n\t\t\"URL\": \"{{packageURL}}\",\n\t\t\"JSProgram\": \"\"\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Package Update non-existing package",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"packageName\", \"chalk\");",
							"pm.collectionVariables.set(\"packageVersion\", \"0.1.2\");",
							"pm.collectionVariables.set(\"packageID\", \"forTests\");",
							"pm.collectionVariables.set(\"packageURL\", \"https://github.com/chalk/chalk\");",
							"pm.collectionVariables.set(\"id\", \"forTests\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"metadata\": {\n\t\t\"Name\": \"{{packageName}}\",\n\t\t\"Version\": \"{{packageVersion}}\",\n\t\t\"ID\": \"{{packageID}}\"\n\t},\n\t\"data\": {\n\t\t\"URL\": \"{{packageURL}}\",\n\t\t\"JSProgram\": \"\"\n\t}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete all package versions ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct message displayed\", function () {",
							"    const message = pm.response.json()[\"message\"];",
							"    pm.expect(message).to.eql(\"Package is deleted.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"name\", \"chalk\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/byName/:name",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						"byName",
						":name"
					],
					"variable": [
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete all package versions Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Passed non-existent package name - should return 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"correct message displayed\", function () {",
							"    const message = pm.response.json()[\"message\"];",
							"    pm.expect(message).to.eql(\"No such Package.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"name\", \"Fash\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/byName/:name",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						"byName",
						":name"
					],
					"variable": [
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete package version",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package1\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"correct message displayed\", function () {",
							"    const message = pm.response.json()[\"message\"];",
							"    pm.expect(message).to.eql(\"Package is deleted.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete package version Invalid",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", \"package100\");",
							"",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"non-existent package - should return 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"correct message displayed\", function () {",
							"    const message = pm.response.json()[\"message\"];",
							"    pm.expect(message).to.eql(\"No such Package.\");",
							"});",
							"",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE}}/package/:id",
					"host": [
						"{{BASE}}"
					],
					"path": [
						"package",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "package6 "
		},
		{
			"key": "name",
			"value": "Fash"
		},
		{
			"key": "package1_is-even_0.1.2",
			"value": "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"
		},
		{
			"key": "package3_chalk_4.1.0",
			"value": ""
		},
		{
			"key": "package5_a_2.1.1",
			"value": "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"
		},
		{
			"key": "package4_ansi-styles_2.0.0",
			"value": ""
		},
		{
			"key": "packageName",
			"value": "a"
		},
		{
			"key": "packageVersion",
			"value": "2.1.1"
		},
		{
			"key": "packageID",
			"value": "package10"
		},
		{
			"key": "content",
			"value": "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"
		},
		{
			"key": "BASE",
			"value": "https://ece-461-project-2-team-4.uc.r.appspot.com"
		},
		{
			"key": "packageURL",
			"value": "https://github.com/chalk/chalk"
		}
	]
}